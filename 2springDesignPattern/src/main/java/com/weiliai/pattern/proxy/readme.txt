代理模式(Proxy Pattern):是指为其他对象提供一种代理,以控制这个对象的访问.代理对象在客户端和目标对象之间起到中介作用,代理模式属于结构性设计模式.

使用代理模式的目的:
    1.保护目标对象
    2.增强目标对象

代理对象持有被代理对象的引用,客户端调用代理对象的方法,同时也调用被代理对象的方法,但是会在代理对象前后增加一些处理代码.

一般代理会被理解为代码增强,实际上就是在原来代码逻辑前后增加一些代码逻辑,使调用者无感知.

代理模式分为:
    1.静态代理
    2.动态代理

JDK动态代理和CGLib对比:
    1.JDK动态代理实现了被代理对象的接口,CGLib代理继承了被代理对象.
    2.JDK动态代理和CGLib代理都在运行期生成字节码,JDK动态代理直接写Class字节码,CGLib使用ASM框架写Class字节码,CGLib代理实现更复杂,生成代理类比JDK动态代理效率低
    3.JDK动态代理调用代理方法通过反射机制调用,CGLib代理通过FastClass机制直接调用方法,CGLib代理执行效率更高

FastClass简单来说:
    为代理类和被代理类各生成一个类并为其方法生成index(int类型);这个index作为一个入参,FastClass就可以直接定位到要调用的方法,直接调用,省去了反射的调用,所以调用效率比JDK反射调用高

代理模式的优缺点:
    优点:
        1.代理模式能将代理对象与真实被调用目标分离
        2.在一定程度上降低了系统的耦合性,扩展性好
        3.可以起到保护目标对象的作用
        4.可以增强目标对象的功能
    缺点:
        1.代理模式会造成系统设计中类数量增加
        2.在客户端和目标对象中增加一个代理对象,会导致请求的处理速度变慢
        3.增加了系统的复杂度